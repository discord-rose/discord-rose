{"meta":{"generator":"0.9.0","format":20,"date":1617726153477},"custom":null,"classes":[{"name":"ThreadComms","description":"<p>Middleman between all thread communications</p>","props":[{"name":"on","type":[[["function"]]],"meta":{"line":143,"file":"ThreadComms.ts","path":"src/clustering"}}],"methods":[{"name":"sendCommand","description":"<p>Sends a command to the master</p>","params":[{"name":"event","description":"<p>Event to send</p>","type":[[["string"]]]},{"name":"data","description":"<p>Data to send along</p>","type":[["*"]]}],"async":true,"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"<p>Data back</p>"},"meta":{"line":192,"file":"ThreadComms.ts","path":"src/clustering"}},{"name":"tell","description":"<p>Tells the master something</p>","params":[{"name":"event","description":"<p>Event to send</p>","type":[[["string"]]]},{"name":"data","description":"<p>Data to send</p>","type":[[["string"]]]}],"meta":{"line":223,"file":"ThreadComms.ts","path":"src/clustering"}}],"meta":{"line":136,"file":"ThreadComms.ts","path":"src/clustering"}},{"name":"Bucket","description":"<p>In charge of handling rest RateLimits</p>","meta":{"line":6,"file":"Bucket.ts","path":"src/rest"}},{"name":"RestError","description":"<p>An error in a Discord request</p>","extends":[[["Error"]]],"props":[{"name":"name","description":"<p>Error code</p>","type":[[["number"]]],"meta":{"line":12,"file":"Error.ts","path":"src/rest"}}],"meta":{"line":1,"file":"Error.ts","path":"src/rest"}},{"name":"RestManager","description":"<p>The base rest handler for all things Discord rest</p>","meta":{"line":16,"file":"Manager.ts","path":"src/rest"}},{"name":"CacheManager","description":"<p>Utility for managing and ruling cache and it's subsequent control</p>","meta":{"line":27,"file":"CacheManager.ts","path":"src/socket"}},{"name":"Shard","description":"<p>Utility manager for a shard</p>","props":[{"name":"ping","description":"<p>Ping in ms</p>","type":[[["number"]]],"meta":{"line":12,"file":"Shard.ts","path":"src/socket"}},{"name":"state","description":"<p>Current shard state</p>","type":[[["State"]]],"meta":{"line":60,"file":"Shard.ts","path":"src/socket"}},{"name":"ready","description":"<p>Whether or not the shard is READY</p>","type":[[["boolean"]]],"meta":{"line":71,"file":"Shard.ts","path":"src/socket"}}],"meta":{"line":8,"file":"Shard.ts","path":"src/socket"}},{"name":"DiscordSocket","description":"<p>Structure in charge of managing Discord communcation over websocket</p>","meta":{"line":7,"file":"WebSocket.ts","path":"src/socket"}},{"name":"CommandContext","description":"<p>Context holding all information about a ran command and utility functions</p>","props":[{"name":"guild","description":"<p>Guild where the message was sent</p>","type":[[["CachedGuild"]]],"meta":{"line":21,"file":"CommandContext.ts","path":"src/structures"}},{"name":"channel","description":"<p>Channel where the message was sent</p>","type":[[["APIChannel"]]],"meta":{"line":29,"file":"CommandContext.ts","path":"src/structures"}},{"name":"member","description":"<p>Member who sent the message</p>","type":[[["APIGuildMember"]]],"meta":{"line":37,"file":"CommandContext.ts","path":"src/structures"}},{"name":"me","description":"<p>Bot's memeber within the guild</p>","type":[[["APIGuildMember"]]],"meta":{"line":47,"file":"CommandContext.ts","path":"src/structures"}},{"name":"embed","description":"<p>Makes an embed to send</p>","type":[[["Embed"]]],"meta":{"line":128,"file":"CommandContext.ts","path":"src/structures"}}],"methods":[{"name":"reply","description":"<p>Replies to the invoking message</p>","params":[{"name":"data","description":"<p>Data for message</p>","type":[[["MessageTypes"]]]},{"name":"mention","description":"<p>Whether or not to mention the user in the reply (defaults to false)</p>","default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["APIMessage",">"]]],"description":"<p>Message sent</p>"},"meta":{"line":55,"file":"CommandContext.ts","path":"src/structures"}},{"name":"send","description":"<p>Sends a message in the same channel as invoking message</p>","params":[{"name":"data","description":"<p>Data for message</p>","type":[[["MessageTypes"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["APIMessage",">"]]],"description":"<p>Message sent</p>"},"meta":{"line":75,"file":"CommandContext.ts","path":"src/structures"}},{"name":"error","description":"<p>Runs an error through sendback of commands.error</p>","params":[{"name":"message","description":"<p>Message of error</p>","type":[[["string"]]]}],"meta":{"line":84,"file":"CommandContext.ts","path":"src/structures"}},{"name":"dm","description":"<p>Sends a message to the user who ran the command</p>","params":[{"name":"data","description":"<p>Data for message</p>","type":[[["MessageTypes"]]]}],"async":true,"meta":{"line":96,"file":"CommandContext.ts","path":"src/structures"}},{"name":"sendFile","description":"<p>Sends a file to the same channel</p>","params":[{"name":"file","description":"<p>File buffer</p>","type":[[["Buffer"]]]},{"name":"extra","description":"<p>Extra message options</p>","type":[[["MessageTypes"]]]}],"async":true,"returns":[[["Promise","<"],["APIMessage",">"]]],"meta":{"line":104,"file":"CommandContext.ts","path":"src/structures"}},{"name":"typing","description":"<p>Starts typing in the channel</p>","async":true,"meta":{"line":114,"file":"CommandContext.ts","path":"src/structures"}},{"name":"delete","description":"<p>Deletes the invoking message</p>","async":true,"meta":{"line":121,"file":"CommandContext.ts","path":"src/structures"}},{"name":"hasPerms","description":"<p>Whether or not the running user has a certain permission</p>","params":[{"name":"perms","description":"<p>Permission to test</p>","type":[[["PermissionName"]]]}],"returns":[[["boolean"]]],"meta":{"line":143,"file":"CommandContext.ts","path":"src/structures"}},{"name":"myPerms","description":"<p>Whether or not the bot user has a certain permission</p>","params":[{"name":"perms","description":"<p>Permission to test</p>","type":[[["PermissionName"]]]}],"returns":[[["boolean"]]],"meta":{"line":153,"file":"CommandContext.ts","path":"src/structures"}}],"meta":{"line":13,"file":"CommandContext.ts","path":"src/structures"}},{"name":"CommandError","description":"<p>Error in command</p>","meta":{"line":10,"file":"CommandHandler.ts","path":"src/structures"}},{"name":"CommandHandler","construct":{"name":"CommandHandler","description":"<p>Create's new Command Handler</p>","params":[{"name":"worker","description":"<p>Worker</p>","type":[[["Worker"]]]}]},"methods":[{"name":"options","description":"<p>Sets Command Handler options</p>","params":[{"name":"opts","description":"<p>Options</p>","type":[[["CommandHandlerOptions"]]]}],"returns":{"types":[[["CommandHandler"]]],"description":"<p>this</p>"},"meta":{"line":55,"file":"CommandHandler.ts","path":"src/structures"}},{"name":"prefix","description":"<p>Sets a prefix fetcher</p>","examples":["worker.commands\n  .setPrefix('!')\n// or\n  .setPrefix(['!', '+'])\n// or\n  .setPrefix((message) => {\n    return db.getPrefix(message.guild_id)\n  })"],"params":[{"name":"fn","description":"<p>String of prefix or Function to choose prefix with</p>","type":[[["function"]]]}],"returns":{"types":[[["CommandHandler"]]],"description":"<p>this</p>"},"meta":{"line":69,"file":"CommandHandler.ts","path":"src/structures"}},{"name":"error","description":"<p>Defines an error handler replacing the default one</p>","examples":["worker.commands\n .error((ctx, error) => {\n   ctx.send(`Error: ${error.message}`)\n })"],"params":[{"name":"fn","description":"<p>Function to handle error</p>","type":[[["function"]]]}],"returns":{"types":[[["CommandHandler"]]],"description":"<p>this</p>"},"meta":{"line":100,"file":"CommandHandler.ts","path":"src/structures"}},{"name":"middleware","description":"<p>Adds a global middleware function</p>","params":[{"name":"fn","description":"<p>Middleware function</p>","type":[[["function"]]]}],"returns":{"types":[[["CommandHandler"]]],"description":"<p>this</p>"},"meta":{"line":116,"file":"CommandHandler.ts","path":"src/structures"}},{"name":"add","description":"<p>Adds a command to the command handler</p>","examples":["worker.commands\n  .add({\n    command: 'hello',\n    exec: (ctx) => {\n      ctx.reply('World!')\n    }\n  })"],"params":[{"name":"command","description":"<p>Command data, be sure to add exec() and command:</p>","type":[[["CommandOptions"]]]}],"returns":{"types":[[["CommandHandler"]]],"description":"<p>this</p>"},"meta":{"line":127,"file":"CommandHandler.ts","path":"src/structures"}},{"name":"find","description":"<p>Gets a command from registry</p>","params":[{"name":"command","description":"<p>Command name to fetch</p>","type":[[["string"]]]}],"returns":{"types":[[["CommandOptions"]]],"description":"<p>Command</p>"},"meta":{"line":165,"file":"CommandHandler.ts","path":"src/structures"}}],"meta":{"line":35,"file":"CommandHandler.ts","path":"src/structures"}},{"name":"Embed","description":"<p>Discord Embed</p>","methods":[{"name":"color","description":"<p>Sets the color</p>","params":[{"name":"color","description":"<p>Color hex code</p>","type":[[["number"]]]}],"meta":{"line":10,"file":"Embed.ts","path":"src/structures"}},{"name":"author","description":"<p>Sets author</p>","params":[{"name":"name","description":"<p>Name of author</p>","type":[[["string"]]]},{"name":"icon","description":"<p>Author avatar icon</p>","type":[[["string"]]]},{"name":"url","description":"<p>URL anchored to the author name</p>","type":[[["string"]]]}],"meta":{"line":20,"file":"Embed.ts","path":"src/structures"}},{"name":"title","description":"<p>Sets the title</p>","params":[{"name":"title","description":"<p>Title name</p>","type":[[["string"]]]},{"name":"url","description":"<p>URL anchored to title name</p>","type":[[["string"]]]}],"meta":{"line":36,"file":"Embed.ts","path":"src/structures"}},{"name":"description","description":"<p>Sets description</p>","params":[{"name":"desc","description":"<p>Description</p>","type":[[["string"]]]}],"meta":{"line":48,"file":"Embed.ts","path":"src/structures"}},{"name":"field","description":"<p>Adds a field</p>","params":[{"name":"name","description":"<p>Fields title</p>","type":[[["string"]]]},{"name":"value","description":"<p>Fields value</p>","type":[[["string"]]]},{"name":"inline","description":"<p>Whether the field is inline</p>","type":[[["boolean"]]]}],"meta":{"line":58,"file":"Embed.ts","path":"src/structures"}},{"name":"thumbnail","description":"<p>Sets the thumbnail</p>","params":[{"name":"url","description":"<p>URL of thumbnail</p>","type":[[["string"]]]},{"name":"width","description":"<p>Optional fixed width</p>","type":[[["number"]]]},{"name":"height","description":"<p>Optional fixed height</p>","type":[[["number"]]]}],"meta":{"line":75,"file":"Embed.ts","path":"src/structures"}},{"name":"image","description":"<p>Sets the image</p>","params":[{"name":"url","description":"<p>URL of image</p>","type":[[["string"]]]},{"name":"width","description":"<p>Optional fixed width</p>","type":[[["number"]]]},{"name":"height","description":"<p>Optional fixed height</p>","type":[[["number"]]]}],"meta":{"line":91,"file":"Embed.ts","path":"src/structures"}},{"name":"footer","description":"<p>Sets the footer</p>","params":[{"name":"text","description":"<p>Text for footer</p>","type":[[["string"]]]},{"name":"icon","description":"<p>Small icon on the bottom left</p>","type":[[["string"]]]}],"meta":{"line":107,"file":"Embed.ts","path":"src/structures"}},{"name":"timestamp","description":"<p>Sets the timestamp</p>","params":[{"name":"date","description":"<p>Date to set, leave blank for current time</p>","type":[[["Date"]]]}],"meta":{"line":120,"file":"Embed.ts","path":"src/structures"}},{"name":"send","description":"<p>Sends embed to channel</p>","params":[{"name":"reply","description":"<p>Whether or not to do so in an inline reply (defaults to true)</p>","default":true,"type":[[["boolean"]]]},{"name":"mention","description":"<p>Whether or not to mention the user in the reply (defaults to false)</p>","default":false,"type":[[["boolean"]]]}],"async":true,"meta":{"line":130,"file":"Embed.ts","path":"src/structures"}},{"name":"render","description":"<p>Renders the embed</p>","returns":[[["APIEmbed"]]],"meta":{"line":140,"file":"Embed.ts","path":"src/structures"}}],"meta":{"line":3,"file":"Embed.ts","path":"src/structures"}},{"name":"Emitter","description":"<p>EventEmitter but with mapped typings</p>","meta":{"line":7,"file":"Emitter.ts","path":"src/utils"}}],"interfaces":[],"typedefs":[],"externals":[]}